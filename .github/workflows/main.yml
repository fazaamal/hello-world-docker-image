# This is a basic workflow to help you get started with Actions

# name: Push Docker GCR and release
name: Release a new version on github

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions: write-all

# this should queue the workflow run if there is already one in progress
concurrency:
  group: deploy
  cancel-in-progress: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
  ghcr:
    runs-on: ubuntu-latest
    # needs: build
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build, Tag, Push to GHCR (Multi-Platform)
        id: ghcr
        uses: ./.github/actions/docker-build-multiplatform
        with:
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"
          image-name: "fazaamal/hello-world-express"
          github-sha: "${{ github.sha }}"
          action: "${{ github.event.action }}"
          merged: "${{ github.event.pull_request.merged }}"
          platforms: "linux/amd64,linux/arm64"

      - name: Extract and store SHA tag
        id: extract_tag
        run: |
          SHA_TAG=$(echo "${{ steps.ghcr.outputs.tags }}" | sed -n '2p')
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
    outputs:
      image_tag: ${{ steps.extract_tag.outputs.sha_tag }}
  release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: ghcr
    if: github.event_name == 'push'
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            @semantic-release/changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  prune:
    runs-on: ubuntu-latest
    needs: ghcr
    steps:
      # - name: Prune images
      #   uses: emmahsax/action-ghcr-prune@main
      #   with:
      #     token: ${{ secrets.PRUNE_TOKEN }}
      #     user: fazaamal
      #     container: hello-world-express
      #     prune-tags-regexes: ^sha\-([a-f0-9]{7})
      #     keep-tags: |
      #       main
      #     keep-last: 1
      #     prune-untagged: true # prune untagged

      # Delete all tagged packages except `latest` and the last other 5 (so 6 tagged packages left over
      # at the end). Also delete the untagged variants of the tagged packages that are deleted.
      - name: Delete Old Tagged Packages
        uses: emmahsax/action-ghcr-prune@main
        with:
          token: ${{ secrets.PRUNE_TOKEN }}
          user: fazaamal
          container: hello-world-express
          prune-tags-regexes: ^sha\-([a-f0-9]{7})
          keep-tags: |
            main
          keep-last: 1
          remove-multi-platform: true

      # After the first step finishes, then go through and delete all other untagged packages
      # UNLESS they are a part of a multi-arch image that is left around from the first step.
      - name: Delete Old Untagged Packages
        uses: emmahsax/action-ghcr-prune@main
        with:
          token: ${{ secrets.PRUNE_TOKEN }}
          user: fazaamal
          container: hello-world-express
          dry-run: false
          # keep-last: 0
          prune-untagged: true

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: ghcr
  #   steps:
  #     - name: Deploy new image to Dokku via SSH
  #       uses: appleboy/ssh-action@v1.0.3
  #       # env:
  #       #   CR_PAT: ${{ secrets.GHCR_TOKEN }}
  #       #   USERNAME: ${{ github.actor }}
  #       #   IMAGE_NAME: ${{ github.repository }}
  #       with:
  #         script: |
  #           dokku git:from-image api ${{ needs.ghcr.outputs.image_tag }}
  #         host: ssh.api.zaman.app
  #         username: root
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         request_pty: true
